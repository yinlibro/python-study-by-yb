一.Python函数参数传递机制

1.方法介绍:

值传递：将实参值的副本（复制品）传入函数，而实参本身不会受到任何影响，可以理解为copy了一个新的角色来参与传入函数。值传递用于不可变类型的参数：元组、字符串、Number

地址传递：地址传递将实参变量的地址传递给形参，此时，形参和实参共同指向同一地址，当形参发生改变时，实参也随之改变。地址传递用于可变类型的参数：列表、字典、集合、对象

Q：如何理解深拷贝和浅拷贝？
A：深拷贝是将对象本身复制给另一个对象，浅拷贝则是将对象引用复制给另外一个对象，因此，当复制后的对象改变时，深拷贝的原对象值不会改变，浅拷贝的原对象值会被改变


2.详细介绍

1）值传递：

def zhichuandi(a, b):
    # 交换a, b变量的值
    a, b = b, a
    print(f'变量a的值是：{a}，变量b的值是：{b}')

#给a，b赋值
a = 1
b = 2
# 调用函数，交换变量a和变量b的值
zhichuandi(a, b)
print(f'变量a的值是：{a}，变量b的值是：{b}')

打印结果：
变量a的值是：2，变量b的值是：1
变量a的值是：1，变量b的值是：2

可以看到程序再调用函数：zhichuandi 后，a，b的值没有发生改变

2）地址传递

def dizhichuandi(cs):
    # 交换dw的a、b两个元素的值
    cs['a'], cs['b'] = cs['b'], cs['a']
    print(f'a元素的值是：{cs["a"]}，b元素的值是：{cs["b"]}')

cs = {'a': 1, 'b': 2}
# 调用函数，交换元素的值
dizhichuandi(cs)
print(f'a元素的值是：{cs["a"]}，b元素的值是：{cs["b"]}')

打印结果：
a元素的值是：2，b元素的值是：1
a元素的值是：2，b元素的值是：1

可以看到程序再调用函数：dizhichuandi 后，a，b的值发生了改变

以上就是python中的两种参数传递机制，核心需求是理解哪些参数类型可变，哪些参数类型不可变。


